# config/settings.py

"""
Configura√ß√µes Essenciais - YoloV8 Inference
==========================================
Configure aqui os diret√≥rios e par√¢metros principais do sistema
"""
from pathlib import Path

# =============================================================================
# üìÅ DIRET√ìRIOS DO PROGRAMA (ALTERE AQUI CONFORME NECESS√ÅRIO)
# =============================================================================
# Diret√≥rio raiz do projeto
PROJECT_ROOT = Path(__file__).parent.parent

# üì∑ Diret√≥rios de imagens
IMG_DIR = PROJECT_ROOT / "img"
INFERENCE_DATA_DIR = IMG_DIR / "inference_data"    # ‚Üê Suas imagens para infer√™ncia

# ü§ñ Diret√≥rios de modelos
MODELS_DIR = PROJECT_ROOT / "models"
PRETRAINED_MODELS_DIR = MODELS_DIR / "pretrained"  # ‚Üê Modelos baixados automaticamente
TRAINED_MODELS_DIR = MODELS_DIR / "trained"        # ‚Üê Seus modelos customizados

# üìä Diret√≥rio de resultados
OUTPUT_DIR = PROJECT_ROOT / "output"                # ‚Üê Resultados JSON e imagens anotadas

# =============================================================================
# ‚öôÔ∏è CONFIGURA√á√ïES DE INFER√äNCIA (ALTERE SE NECESS√ÅRIO)
# =============================================================================
# Modelo padr√£o (ser√° baixado automaticamente se n√£o existir)
DEFAULT_MODEL = "yolov8n.pt"

# Confian√ßa m√≠nima para detec√ß√µes (0.0 a 1.0)
DEFAULT_CONFIDENCE_THRESHOLD = 0.25

# IoU threshold para Non-Maximum Suppression
DEFAULT_IOU_THRESHOLD = 0.45

# =============================================================================
# ü§ñ MODELOS YOLOV8 DISPON√çVEIS
# =============================================================================
AVAILABLE_PRETRAINED_MODELS = [
    "yolov8n.pt",  # Nano - Mais r√°pido, menor precis√£o
    "yolov8s.pt",  # Small
    "yolov8m.pt",  # Medium  
    "yolov8l.pt",  # Large
    "yolov8x.pt"   # Extra Large - Mais lento, maior precis√£o
]

# =============================================================================
# üìÑ EXTENS√ïES DE IMAGEM SUPORTADAS
# =============================================================================
SUPPORTED_IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp']

# =============================================================================
# üè∑Ô∏è CLASSES COCO (80 classes do dataset COCO)
# =============================================================================
CLASSES = [
    'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light',
    'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
    'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee',
    'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard',
    'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',
    'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch',
    'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
    'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear',
    'hair drier', 'toothbrush'
]

# =============================================================================
# üîß CLASSE DE CONFIGURA√á√ÉO (N√ÉO ALTERE ESTA PARTE)
# =============================================================================
class Config:
    """Configura√ß√µes centralizadas do sistema."""
    
    # Diret√≥rios principais  
    PROJECT_ROOT = PROJECT_ROOT
    IMG_DIR = IMG_DIR
    INFERENCE_DATA_DIR = INFERENCE_DATA_DIR
    MODELS_DIR = MODELS_DIR
    PRETRAINED_MODELS_DIR = PRETRAINED_MODELS_DIR
    TRAINED_MODELS_DIR = TRAINED_MODELS_DIR
    OUTPUT_DIR = OUTPUT_DIR
    
    # Configura√ß√µes de infer√™ncia
    DEFAULT_MODEL = DEFAULT_MODEL
    DEFAULT_CONFIDENCE_THRESHOLD = DEFAULT_CONFIDENCE_THRESHOLD
    DEFAULT_IOU_THRESHOLD = DEFAULT_IOU_THRESHOLD
    
    # Modelos e extens√µes
    AVAILABLE_PRETRAINED_MODELS = AVAILABLE_PRETRAINED_MODELS
    SUPPORTED_IMAGE_EXTENSIONS = SUPPORTED_IMAGE_EXTENSIONS
    
    # Configura√ß√µes de sa√≠da
    SAVE_ANNOTATED_IMAGES = True
    SAVE_JSON_RESULTS = True
    
    def __init__(self):
        """Inicializa e cria diret√≥rios necess√°rios."""
        self.ensure_directories()
    
    def ensure_directories(self):
        """Garante que todos os diret√≥rios necess√°rios existam."""
        directories = [
            self.INFERENCE_DATA_DIR,
            self.PRETRAINED_MODELS_DIR,
            self.TRAINED_MODELS_DIR,
            self.OUTPUT_DIR
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
    
    def get_available_local_models(self):
        """Retorna lista de modelos dispon√≠veis localmente."""
        models = []
        
        # Verifica modelos pr√©-treinados
        if self.PRETRAINED_MODELS_DIR.exists():
            models.extend(list(self.PRETRAINED_MODELS_DIR.glob("*.pt")))
        
        # Verifica modelos treinados
        if self.TRAINED_MODELS_DIR.exists():
            models.extend(list(self.TRAINED_MODELS_DIR.glob("*.pt")))
        
        return [str(model) for model in models]
    
    def get_model_path(self, model_name: str):
        """
        Retorna o caminho completo para um modelo.
        
        Args:
            model_name: Nome do modelo (ex: "yolov8n.pt")
            
        Returns:
            Caminho para o modelo local ou nome para download
        """
        import os
        
        # Verifica se √© um caminho absoluto
        if os.path.isabs(model_name):
            return model_name
        
        # Verifica modelos treinados primeiro
        trained_path = self.TRAINED_MODELS_DIR / model_name
        if trained_path.exists():
            return str(trained_path)
        
        # Verifica modelos pr√©-treinados locais  
        pretrained_path = self.PRETRAINED_MODELS_DIR / model_name
        if pretrained_path.exists():
            return str(pretrained_path)
        
        # Se n√£o encontrou local, retorna apenas o nome (para download autom√°tico)
        return model_name

# Inst√¢ncia global da configura√ß√£o
config = Config()
